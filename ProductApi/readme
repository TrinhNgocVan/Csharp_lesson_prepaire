B∆∞·ªõc 5: C·∫•u h√¨nh k·∫øt n·ªëi SQL Server
‚û§ File: appsettings.json
Th√™m d√≤ng sau:

json
Copy
Edit
"ConnectionStrings": {
  "DefaultConnection": "Server=localhost;Database=ProductDb;Trusted_Connection=True;MultipleActiveResultSets=true"
}
üîÅ N·∫øu d√πng SQL Express: "Server=localhost\\SQLEXPRESS;"

üß© B∆∞·ªõc 6: C·∫≠p nh·∫≠t Program.cs
csharp
Copy
Edit
using Microsoft.EntityFrameworkCore;
using ProductApi.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Add EF Core with SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// T·ª± t·∫°o DB n·∫øu ch∆∞a c√≥
using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.EnsureCreated(); // ho·∫∑c d√πng EF migrations
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();
üß™ B∆∞·ªõc 7: T·∫°o Controller API
‚û§ File: Controllers/ProductsController.cs
csharp
Copy
Edit
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ProductApi.Data;
using ProductApi.Models;

namespace ProductApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private readonly AppDbContext _context;

    public ProductsController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<IActionResult> GetAll() =>
        Ok(await _context.Products.ToListAsync());

    [HttpGet("{id}")]
    public async Task<IActionResult> Get(int id)
    {
        var product = await _context.Products.FindAsync(id);
        return product == null ? NotFound() : Ok(product);
    }

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] Product product)
    {
        _context.Products.Add(product);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(Get), new { id = product.Id }, product);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update(int id, [FromBody] Product updated)
    {
        var product = await _context.Products.FindAsync(id);
        if (product == null) return NotFound();

        product.Name = updated.Name;
        product.Price = updated.Price;
        await _context.SaveChangesAsync();

        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete(int id)
    {
        var product = await _context.Products.FindAsync(id);
        if (product == null) return NotFound();

        _context.Products.Remove(product);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    [HttpGet("search")]
    public async Task<IActionResult> Search([FromQuery] string keyword)
    {
        var results = await _context.Products
            .Where(p => p.Name.Contains(keyword))
            .ToListAsync();

        return Ok(results);
    }
}
‚ñ∂Ô∏è B∆∞·ªõc 8: Ch·∫°y ·ª©ng d·ª•ng
bash
Copy
Edit
dotnet run
M·ªü tr√¨nh duy·ªát ƒë·∫øn:

bash
Copy
Edit
https://localhost:{port}/swagger
D√πng Swagger UI ƒë·ªÉ test t·∫•t c·∫£ c√°c API endpoints

üìå B·ªï sung: D√πng Entity Framework Migrations (khuy√™n d√πng)
bash
Copy
Edit
dotnet ef migrations add InitialCreate
dotnet ef database update
‚úÖ K·∫øt qu·∫£
B·∫°n ƒë√£ c√≥ m·ªôt API c√≥ th·ªÉ:

GET /api/products ‚Äì l·∫•y danh s√°ch

GET /api/products/{id} ‚Äì l·∫•y 1 s·∫£n ph·∫©m

POST /api/products ‚Äì t·∫°o m·ªõi

PUT /api/products/{id} ‚Äì c·∫≠p nh·∫≠t

DELETE /api/products/{id} ‚Äì xo√°

GET /api/products/search?keyword=abc ‚Äì t√¨m ki·∫øm theo t√™n

N·∫øu b·∫°n mu·ªën m√¨nh b·ªï sung th√™m:

Upload h√¨nh ·∫£nh s·∫£n ph·∫©m

Th√™m ph√¢n trang / s·∫Øp x·∫øp

Th√™m authentication (JWT)

K·∫øt n·ªëi frontend

=> M√¨nh c√≥ th·ªÉ h·ªó tr·ª£ chi ti·∫øt n·ªØa nh√©! B·∫°n mu·ªën m·ªü r·ªông g√¨ ti·∫øp?